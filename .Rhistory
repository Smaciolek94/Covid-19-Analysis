ratioprev <- rep(0,100)
for (i in 1:100){
ratio[i] <- rawbycase$placesum[i-1] / rawbycase$placesum[i]
}
plot(ratio[1:100],main="ratio of number of cases to previous",type="o",xlab="rank (#1 means worst hit)",ylab="ratio")
lines(ratio)
ratioprev <- rep(0,100)
for (i in 1:100){
ratioprev[i] <- rawbycase$placesum[i-1] / rawbycase$placesum[i]
}
plot(ratioprev[1:100],main="ratio of number of cases to previous",type="o",xlab="rank (#1 means worst hit)",ylab="ratio")
lines(ratio)
#importing
raw <- read.csv("C:\\Users\\Stvma\\Desktop\\Covid-19\\covid_cases.csv",header= TRUE)
raw <- as.data.frame(raw)
#converting case counts to intergers
raw[,12:ncol(raw)] <- as.integer(unlist(raw[,12:ncol(raw)]))
daysums <- rep(0,(ncol(raw)-11))
#converting lat/long values to intergers
raw[,8:9] <- as.numeric(unlist(raw[,8:9]))
#summing case counts by day
for (i in 12:ncol(raw)){
daysums[(i-11)] <- sum(raw[,i])
}
#creating a date vector
date <- 1:(ncol(raw)-11)
date <- as.Date(date,origin = "2020-01-20")
format(date,format = "%b %d %y")
#time plot of total cases by day
plot(date,daysums,main="total US cases",ylab = "new cases",xlab = "date",type="o")
placesum <- rep(0,nrow(raw))
#summing the cases by place
for (i in 1:nrow(raw)){
placesum[i] <- sum(raw[i,12:ncol(raw)])
}
#attaching place sum to raw data
raw <- cbind(raw,placesum)
#creating a new data frame and sorting by number of infections by place
placelist <- data.frame(as.character(raw$Admin2),as.character(raw$Province_State),raw$placesum)
placelist <- placelist[order(-placesum),]
rank <- 1:nrow(placelist)
placelist <- data.frame(rank,placelist)
#list of case counts by place
colnames(placelist)=c("Rank","City","State","Total cases as of 3/30")
#printing 10 worse areas
#print("Top 10 worst affected areas")
#print(placelist[1:10,],row.names=FALSE,class=FALSE,right=TRUE)
write.csv(placelist,"C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\Ranked_Places.csv",row.names=FALSE)
#creating a new dataframe by number of cases
rawbycase <- raw[order(-placesum),]
#time plots of the 10 worst places
for (i in 1:10){
main = paste("Cases in",rawbycase$Admin2[i],",",rawbycase$Province_State[i])
trimmedcase <- as.numeric(rawbycase[i,12:80])
plot(date,trimmedcase,main = main,type="o",xlab="date",ylab="cases")
}
plot(rawbycase$placesum[1:10],main="Chart of infected places",ylab="cases",xlab="rank (#1 means worst hit)",type="o")
ntrys <- 200
ratio <- rep(0,ntrys)
for (i in 1:ntrys){
ratio[i] <- rawbycase$placesum[1] / rawbycase$placesum[i]
}
plot(ratio,main="ratio of number of cases to worst",type="o",xlab="rank (#1 means worst hit)",ylab="ratio")
rank <- 1:ntrys
#for (i in 1:10){
#ratiomodel <- lm(ratio~poly(rank,i))
#plot(ratiomodel$residuals)
#qqnorm(ratiomodel$fitted.values)
#plot(ratio,main="ratio of number of cases to worst",type="l",col="black",xlab="rank (#1 means worst hit)",ylab="ratio")
#lines(ratiomodel$fitted.values,type="l",col="blue")
}
ratiomodel <- lm(ratio~poly(rank,5))
summary(ratiomodel)
plot(ratiomodel$residuals,main="residual plot, 5th order poly",ylab="residuals",xlab="rank")
qqnorm(ratiomodel$fitted.values,main = "qqplot of 5th order poly fit")
plot(ratio,main="ratio of number of cases to worst",type="l",col="black",xlab="rank (#1 means worst hit)",ylab="ratio")
lines(ratiomodel$fitted.values,type="l",col="blue")
ratioprev <- rep(0,100)
for (i in 1:100){
ratioprev[i] <- rawbycase$placesum[i-1] / rawbycase$placesum[i]
}
plot(ratioprev[1:100],main="ratio of number of cases to previous",type="o",xlab="rank (#1 means worst hit)",ylab="ratio")
lines(ratio)
raw <- read.csv("C:\Users\Stvma\Documents\GitHub\Covid-19-Analysis\covid_cases.csv",header= TRUE)
raw <- read.csv("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\covid_cases.csv",header= TRUE)
raw <- as.data.frame(raw)
#converting case counts to intergers
raw[,12:ncol(raw)] <- as.integer(unlist(raw[,12:ncol(raw)]))
daysums <- rep(0,(ncol(raw)-11))
#converting lat/long values to intergers
raw[,8:9] <- as.numeric(unlist(raw[,8:9]))
#summing case counts by day
for (i in 12:ncol(raw)){
daysums[(i-11)] <- sum(raw[,i])
}
#creating a date vector
date <- 1:(ncol(raw)-11)
date <- as.Date(date,origin = "2020-01-20")
format(date,format = "%b %d %y")
#time plot of total cases by day
plot(date,daysums,main="total US cases",ylab = "new cases",xlab = "date",type="o")
placesum <- rep(0,nrow(raw))
#summing the cases by place
for (i in 1:nrow(raw)){
placesum[i] <- sum(raw[i,12:ncol(raw)])
}
#attaching place sum to raw data
raw <- cbind(raw,placesum)
#creating a new data frame and sorting by number of infections by place
placelist <- data.frame(as.character(raw$Admin2),as.character(raw$Province_State),raw$placesum)
placelist <- placelist[order(-placesum),]
rank <- 1:nrow(placelist)
placelist <- data.frame(rank,placelist)
#list of case counts by place
colnames(placelist)=c("Rank","City","State","Total cases as of 3/30")
#printing 10 worse areas
#print("Top 10 worst affected areas")
#print(placelist[1:10,],row.names=FALSE,class=FALSE,right=TRUE)
write.csv(placelist,"C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\Ranked_Places.csv",row.names=FALSE)
#creating a new dataframe by number of cases
rawbycase <- raw[order(-placesum),]
#time plots of the 10 worst places
for (i in 1:10){
main = paste("Cases in",rawbycase$Admin2[i],",",rawbycase$Province_State[i])
trimmedcase <- as.numeric(rawbycase[i,12:80])
plot(date,trimmedcase,main = main,type="o",xlab="date",ylab="cases")
}
plot(rawbycase$placesum[1:10],main="Chart of infected places",ylab="cases",xlab="rank (#1 means worst hit)",type="o")
ntrys <- 200
ratio <- rep(0,ntrys)
for (i in 1:ntrys){
ratio[i] <- rawbycase$placesum[1] / rawbycase$placesum[i]
}
plot(ratio,main="ratio of number of cases to worst",type="o",xlab="rank (#1 means worst hit)",ylab="ratio")
rank <- 1:ntrys
#for (i in 1:10){
#ratiomodel <- lm(ratio~poly(rank,i))
#plot(ratiomodel$residuals)
#qqnorm(ratiomodel$fitted.values)
#plot(ratio,main="ratio of number of cases to worst",type="l",col="black",xlab="rank (#1 means worst hit)",ylab="ratio")
#lines(ratiomodel$fitted.values,type="l",col="blue")
}
ratiomodel <- lm(ratio~poly(rank,5))
summary(ratiomodel)
plot(ratiomodel$residuals,main="residual plot, 5th order poly",ylab="residuals",xlab="rank")
qqnorm(ratiomodel$fitted.values,main = "qqplot of 5th order poly fit")
plot(ratio,main="ratio of number of cases to worst",type="l",col="black",xlab="rank (#1 means worst hit)",ylab="ratio")
lines(ratiomodel$fitted.values,type="l",col="blue")
ratioprev <- rep(0,100)
for (i in 1:100){
ratioprev[i] <- rawbycase$placesum[i-1] / rawbycase$placesum[i]
}
plot(ratioprev[1:100],main="ratio of number of cases to previous",type="o",xlab="rank (#1 means worst hit)",ylab="ratio")
lines(ratio)
ratioprev <- rep(1,100)
for (i in 2:100){
ratioprev[i] <- rawbycase$placesum[i-1] / rawbycase$placesum[i]
}
plot(ratioprev[1:100],main="ratio of number of cases to previous",type="o",xlab="rank (#1 means worst hit)",ylab="ratio")
lines(ratio)
library(read.xl
library(read.xl)
library(read.xl)
library(readxl)
install.packages("readxl")
library(readxl)
read_xls("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\Census Data\\Age\\Census Age Data 1.xls")
install.packages("readxl")
age1 <- read_xls("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\Census Data\\Age\\Census Age Data 1.xls")
View(age1)
age<- rep(0,10)
for (i in 1:10){
age[i] <- read_xls("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\Census Data\\Age\\Census Age Data 1.xls",sheet = i)
}
View(age1)
#age<- rep(0,10)
for (i in 1:10){
age[i] <- read_xls("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\Census Data\\Age\\Census Age Data 1.xls",sheet = i)
}
age1 <- vector(mode = "list", length = 10)
for (i in 1:10){
age1[i] <- read_xls("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\Census Data\\Age\\Census Age Data 1.xls",sheet = i)
}
View(age1)
age1$1
age1$[[1]]
age1 <- rep(NA,10)
age1 <- as.list(age1)
for (i in 1:10){
age1[i] <- read_xls("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\Census Data\\Age\\Census Age Data 1.xls",sheet = i)
}
#data as of 4/3/2020
raw <- read.csv("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\US_confirmed_4-3.csv",header=TRUE)
raw[,12:ncol(raw)] <- as.integer(unlist(raw[,12:ncol(raw)]))
#summing case counts by day
daysums <- rep(0,(ncol(raw)-11))
for (i in 12:ncol(raw)){
daysums[(i-11)] <- sum(raw[,i])
}
#creating a date vector
date <- 1:(ncol(raw)-11)
date <- as.Date(date,origin = "2020-01-20")
format(date,format = "%b %d %y")
#time plot of total cases by day
plot(date,daysums,main="total US cases as of 4/2",ylab = "new cases",xlab = "date",type="o")
rawnj <- raw[which(raw$Province_State == "New Jersey"),]
#summing nj case counts by day
daysumsnj <- rep(0,(ncol(rawnj)-11))
for (i in 12:ncol(rawnj)){
daysumsnj[(i-11)] <- sum(rawnj[,i])
}
plot(date,daysumsnj,main="total NJ cases as of 4/2",ylab = "new cases",xlab = "date",type="o")
ratio <- daysumsnj / daysums
plot(date,ratio,main="proportion of total US cases in NJ",type="o")
rawny <- raw[which(raw$Province_State == "New York"),]
#summing nj case counts by day
daysumsny <- rep(0,(ncol(rawny)-11))
for (i in 12:ncol(rawny)){
daysumsny[(i-11)] <- sum(rawny[,i])
}
plot(date,daysumsny,main="total NY cases as of 4/2",ylab = "new cases",xlab = "date",type="o")
rationy <- daysumsny / daysums
plot(date,rationy,main="proportion of total US cases in NY",type="o")
plot(date,daysums,main = "Total Cases: US, NJ, and NY",sub="Black = US total, Red = New York State, Blue = New Jersey",ylab="cases",type="o",col="black")
lines(date,daysumsnj,type="o",col="blue")
lines(date,daysumsny,type="o",col="red")
casesnyc <- as.vector(raw[which(raw$Admin2 == "New York"),12:ncol(raw)])
casesphilly <- as.vector(raw[which(raw$Admin2 == "Philadelphia"),12:ncol(raw)])
casesla <- as.vector(raw[which(raw$Admin2 == "Los Angeles"),12:ncol(raw)])
casesSF <- as.vector(raw[which(raw$Admin2 == "San Francisco"),12:ncol(raw)])
casesdallas <- as.vector(raw[which(raw$Admin2 == "Dallas"),12:ncol(raw)])
casesdallas <- casesdallas[5,]
casessea <- as.vector(raw[which(raw$Admin2 == "Seatle"),12:ncol(raw)])
plot(date,daysumsny,main = "Total NY State / NYC cases",ylab = "cases",type="o",col="black")
lines(date,casesnyc,type="o",col="blue")
newdayustotal <- rep(0,length(daysums))
for (i in 2:length(daysums)){
newdayustotal[i] <- daysums[i] - daysums[i-1]
}
plot(date,newdayustotal,main="Daily New Cases in the US",ylab="cases",type="o")
plot(date,casesdallas,ylim=c(0,25000),main="Cases in selected US cities as of 4/2",sub="Black = NYC, Blue = LA, Red = Phila, Green = San Fran, Yellow = Dallas",type="o",col="yellow")
lines(date,casesla,type="o",col="blue")
lines(date,casesphilly,type="o",col="red")
lines(date,casesSF,type="o",col="green")
lines(date,casesnyc,type="o",col="black")
#data not available for Phoenix, Chicago, Houston
propinfected <- casesnyc / 8623000
plot(date,propinfected,main="proportion of total NYC population infected",ylab="proportion infected",type="o")
raw <- read.csv("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\US_confirmed_4-3.csv",header=TRUE)
View(raw)
raw <- raw[,-1:5]
raw <- raw[,-(1:5)]
View(raw)
raw <- raw[,-6]
View(raw)
raw <- read.csv("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\US_confirmed_4-3.csv",header=TRUE)
raw <- read.csv("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\US_confirmed_4-3.csv",header=TRUE)
raw <- raw[,-c(1:5,8:11)]
View(raw)
rawwash <- raw[where(raw$province_State == "Washington")]
rawwash <- raw[which(raw$province_State == "Washington"),]
View(rawwash)
raw <- read.csv("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\US_confirmed_4-3.csv",header=TRUE)
raw <- raw[,-c(1:5,8:11)] #removing nonimportant columns
rawwash <- raw[which(raw$province_State == "Washington"),]
rawwash <- raw[which(raw$Province_State == "Washington"),]
View(rawwash)
washsum <- rep(0,ncol((raw)-2))
for (i in 1:(ncol(raw)-2)){
washum[i] <- sum(rawwash[,i+2])
}
for (i in 1:(ncol(raw)-2)){
washsum[i] <- sum(rawwash[,i+2])
}
print(washsum)
washsum <- rep(0,(ncol(raw)-2))
for (i in 1:(ncol(raw)-2)){
washsum[i] <- sum(rawwash[,i+2])
}
print(washsum)
for (i in 1:(ncol(raw)-2)){
washsum[i] <- sum(rawwash[,i+2])
if (i > 1){
washdaysum[i] <- washsum[i] - washsum[i-1]
}
}
washdaysum <- rep(0,(ncol(raw)-2))
for (i in 1:(ncol(raw)-2)){
washsum[i] <- sum(rawwash[,i+2])
if (i > 1){
washdaysum[i] <- washsum[i] - washsum[i-1]
}
}
plot(date,washsum,main="Washington State Cases as of 4/3",type="o",col="black",ylab="cases")
plot(date,washsum,ylab="cases",main="Washington State Cases as of 4/3",type="o",col="black")
date <- 1:(ncol(raw)-2)
date <- as.Date(date,origin = "2020-01-21")
format(date,format = "%b %d %y")
plot(date,washsum,ylab="cases",main="Washington State Cases as of 4/3",type="o",col="black")
plot(date,washsum,ylab="cases",main="Washington State Cases as of 4/3",type="o",col="black")
lines(date,washdaysum,type="o",col="blue",sub="new day cases in blue")
plot(date,washsum,ylab="cases",main="Washington State Cases as of 4/3",sub="new day cases in blue",type="o",col="black")
lines(date,washdaysum,type="o",col="blue")
plot(date,washdaysum,main="New cases by day Washington State",ylab="cases")
plot(date,washdaysum,main="New cases by day Washington State",ylab="cases",type="o")
rawnj <- raw[which(raw$Province_State=="New Jersey"),]
View(rawnj)
rawsea <- raw[which(raw$Admin2=="Seattle"),]
rawsea <- raw[which(raw$Admin2=="Kings"),]
View(rawsea)
View(rawsea)
rawsea <- raw[which(raw$Admin2=="King"),]
View(rawsea)
rawsea <- raw[which(raw$Admin2=="King"&raw$Province_State=="Washington"),]
rawsea <- raw[which(raw$Admin2=="King"&raw$Province_State=="Washington"),]
rawnyc <- raw[which(raw$Admin2=="New York")]
plot(date,rawnyc,main="Seattle and New York Cases",sub="black = NYC, blue = Seattle",ylab="cases",type="o")
lines(date,rawsea,type="o",col="blue")
View(rawsea)
rawsea <- raw[which(raw$Admin2=="King"&raw$Province_State=="Washington"),]
rawnyc <- raw[which(raw$Admin2=="New York")]
plot(date,rawnyc[3:ncol(rawnyc)],main="Seattle and New York Cases",sub="black = NYC, blue = Seattle",ylab="cases",type="o")
lines(date,rawsea[3:ncol(rawsea)],type="o",col="blue")
rawsea <- raw[which(raw$Admin2=="King"&raw$Province_State=="Washington"),]
rawnyc <- raw[which(raw$Admin2=="New York"),]
plot(date,rawnyc[3:ncol(rawnyc)],main="Seattle and New York Cases",sub="black = NYC, blue = Seattle",ylab="cases",type="o")
lines(date,rawsea[3:ncol(rawsea)],type="o",col="blue")
plot(date,rawsea[3:ncol(rawsea)],type="o",col="blue")
plot(date,rawsea[3:ncol(rawsea)],main="Seattle Cases",type="o",col="blue")
raw <- read.csv("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\US_confirmed_4-3.csv",header=TRUE)
raw <- raw[,-c(1:5,8:11)] #removing nonimportant columns
rawnj <- raw[which(raw$Province_State=="New Jersey"),]
daynj <- rep(0,(ncol(rawnj)-2))
daynewnj <- rep(0,(ncol(rawnj)-2))
for (i in 1:(ncol(rawnj)-2)){
daynj <- sum(rawnj[,i+2])
if (i>2){
daynewnj[i] <- daynj[i] - daynj[i-1]
}
}
daynj[1] <- nj[1]
raw <- read.csv("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\US_confirmed_4-3.csv",header=TRUE)
raw <- raw[,-c(1:5,8:11)] #removing nonimportant columns
rawnj <- raw[which(raw$Province_State=="New Jersey"),]
daynj <- rep(0,(ncol(rawnj)-2))
daynewnj <- rep(0,(ncol(rawnj)-2))
for (i in 1:(ncol(rawnj)-2)){
daynj[i] <- sum(rawnj[,i+2])
if (i>2){
daynewnj[i] <- daynj[i] - daynj[i-1]
}
}
daynj[1] <- nj[1]
raw <- read.csv("C:\\Users\\Stvma\\Documents\\GitHub\\Covid-19-Analysis\\US_confirmed_4-3.csv",header=TRUE)
raw <- raw[,-c(1:5,8:11)] #removing nonimportant columns
rawnj <- raw[which(raw$Province_State=="New Jersey"),]
daynj <- rep(0,(ncol(rawnj)-2))
daynewnj <- rep(0,(ncol(rawnj)-2))
for (i in 1:(ncol(rawnj)-2)){
daynj[i] <- sum(rawnj[,i+2])
if (i>2){
daynewnj[i] <- daynj[i] - daynj[i-1]
}
}
daynewnj[1] <- daynj[1]
daynj
daynewnj
date <- 1:(ncol(raw)-2)
date <- as.Date(date,origin = "2020-01-21")
format(date,format = "%b %d %y")
plot(date,daynewnj,main="New Daily Cases in NJ",ylab="cases")
plot(date,daynewnj,main="New Daily Cases in NJ",ylab="cases",type="o")
plot(date,daynj,main="Total Daily Cases in NJ",ylab="cases",type="o")
log(daynj)
plot(log(daynj))
plot(log(daynewnj))
lm1 <- lm(daynj~poly(date,1))
summary(lm1)
#preliminary plots:
plot(date,daynewnj,main="New Daily Cases in NJ",ylab="cases",type="o")
plot(date,daynj,main="Total Daily Cases in NJ",ylab="cases",type="o")
plot(date,log(daynewnj),main="log plot of New Daily Cases in NJ",ylab="cases",type="o")
plot(date,log(daynj),main="log plot of Total Daily Cases in NJ",ylab="cases",type="o")
model <- function(degree,log){
if (log == "no"){
p <- lm(daynj~poly(date,degree))
summary(p)
plot(date,daynj,main = "observed vs predicted",ylab="cases",col="black")
lines(date,predict(p),col="blue")
}
if (log == "yes"){
p <- lm(log(daynj)~poly(date,degree))
plot(date,log(daynj),main = "observed vs predicted",ylab="cases",col="black")
lines(date,predict(p),col="blue")
}
}
model(1,"no")
model(1,"yes")
for (i in 1:5){
model(i,"no")
}
model <- function(degree,log){
if (log == "no"){
p <- lm(daynj~poly(date,degree))
summary(p)
main = paste("observed vs predicted, poly order: ",i)
plot(date,daynj,main = main,ylab="cases",col="black")
lines(date,predict(p),col="blue")
}
if (log == "yes"){
p <- lm(log(daynj)~poly(date,degree))
summary(p)
main = paste("observed vs predicted, log order :",i)
plot(date,log(daynj),main = "observed vs predicted",ylab="cases",col="black")
lines(date,predict(p),col="blue")
}
}
for (i in 1:10){
model(i,"no")
}
model <- function(degree,log){
if (log == "no"){
p <- lm(daynj~poly(date,degree))
print(summary(p))
main = paste("observed vs predicted, poly order: ",i)
plot(date,daynj,main = main,ylab="cases",col="black")
lines(date,predict(p),col="blue")
}
if (log == "yes"){
p <- lm(log(daynj)~poly(date,degree))
print(summary(p))
main = paste("observed vs predicted, log order :",i)
plot(date,log(daynj),main = "observed vs predicted",ylab="cases",col="black")
lines(date,predict(p),col="blue")
}
}
for (i in 1:10){
model(i,"no")
}
model <- function(degree,log){
if (log == "no"){
p <- lm(daynj~poly(date,degree))
print(summary(p))
main = paste("observed vs predicted, poly order: ",i)
plot(date,daynj,main = main,ylab="cases",col="black")
lines(date,predict(p),col="blue")
plot(date,p$residuals,main="residual plot")
qqnorm(p$residuals,main="qqplot")
}
if (log == "yes"){
p <- lm(log(daynj)~poly(date,degree))
print(summary(p))
main = paste("observed vs predicted, log order :",i)
plot(date,log(daynj),main = "observed vs predicted",ylab="cases",col="black")
lines(date,predict(p),col="blue")
}
}
model(5,"no")
for (i in 1:10){
model(i,"no")
}
plot((log(daynj)+.01))
plot(log(daynj+.01))
plot(log(.01*daynj+1.))
plot(date,p$residuals,main="residual plot")
qqnorm(p$residuals,main="qqplot")
plot(log(.01*daynj+1))
plot(log(.1*daynj+1))
model <- function(degree,log){
if (log == "no"){
p <- lm(daynj~poly(date,degree))
print(summary(p))
main = paste("observed vs predicted, poly order: ",i)
plot(date,daynj,main = main,ylab="cases",col="black")
lines(date,predict(p),col="blue")
plot(date,p$residuals,main="residual plot")
qqnorm(p$residuals,main="qqplot")
}
if (log == "yes"){
logdaynj <- log(.1*daynj+1)
p <- lm(logdaynj~poly(date,degree))
print(summary(p))
main = paste("observed vs predicted, log order :",i)
plot(date,logdaynj,main = "observed vs predicted",ylab="cases",col="black")
lines(date,predict(p),col="blue")
plot(date,p$residuals,main="residual plot")
qqnorm(p$residuals,main="qqplot")
}
}
for (i in 1:10){
model(i,"yes")
}
