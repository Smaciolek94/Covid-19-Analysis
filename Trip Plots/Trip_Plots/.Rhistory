shiny::runApp()
runApp('~/GitHub/Covid-19-Analysis/State Plot/State_Plot')
runApp()
runApp()
runApp()
uscases <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"))
usdeaths <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"))
uscases <- uscases[,-c(1:5,8:11)]
usdeaths <- usdeaths[,-c(1:5,8:12)]
uscases <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_confirmed_US.csv"))
usdeaths <- read.csv(url("https://raw.githubusercontent.com/CSSEGISandData/COVID-19/master/csse_covid_19_data/csse_covid_19_time_series/time_series_covid19_deaths_US.csv"))
uscases <- uscases[,-c(1:5,8:11)]
usdeaths <- usdeaths[,-c(1:5,8:12)]
n <- ncol(uscases)-2
date <- 1:n
date <- as.Date(date,origin = "2020-01-21")
format(date,format = "%b %d %y")
stateplot <- function(region,cd){
cases <- rep(0,n)
newcases <- rep(0,n)
deaths <- rep(0,n)
newdeaths <- rep(0,n)
rollingcase <- rep(0,n)
rollingdeath <- rep(0,n)
regioncase <- uscases[which(uscases$Province_State==region),]
regiondeath <- usdeaths[which(usdeaths$Province_State==region),]
for (i in 1:n){
cases[i] <- sum(regioncase[i+2])
deaths[i] <- sum(regiondeath[i+2])
if (i > 1){
newcases[i] <- cases[i] - cases[i-1]
newdeaths[i] <- deaths[i] - deaths[i-1]
}
}
newcases[1] <- cases[1]
newdeaths[1] <- deaths[1]
#for (i in 6:n){
#   rollingcase[i] <- mean(newcases[(i-6):i])
#   rollingdeath[i] <- mean(newdeaths[(i-6):i])
#}
#rollingcase[1:6] <- newcases[1:6]
#rollingdeath[1:6] <- newdeaths[1:6]
main1 <- paste("Total Cases in:",region,date[n])
main2 <- paste("Total Deaths in:",region,date[n])
main3 <- paste("New Cases in:",region,date[n])
main4 <- paste("New Deaths in:",region,date[n])
if (cd == "c"){
plot(date,newcases,main=main3,ylab="cases",type="o")
}
if (cd == "d"){
plot(date,newdeaths,main=main4,ylab="deaths",type="o")
}
}
stateplot("New Jersey")
stateplot("New Jersey","c")
townplot <- function(location,cd){
cases <- rep(0,n)
newcases <- rep(0,n)
deaths <- rep(0,n)
newdeaths <- rep(0,n)
rollingcase <- rep(0,n)
rollingdeath <- rep(0,n)
towncase <- as.numeric(uscases[which(uscases$Combined_Key==location),])
towndeath <- as.numeric(usdeaths[which(usdeaths$Combined_Key==location),])
for (i in 1:n){
cases[i] <- towncase[i+1]
deaths[i] <- towndeath[i+1]
if (i > 1){
newcases[i] <- cases[i] - cases[i-1]
newdeaths[i] <- deaths[i] - deaths[i-1]
}
}
newcases[1] <- cases[1]
newdeaths[1] <- deaths[1]
#for (i in 6:n){
#    rollingcase[i] <- mean(newcases[(i-6):i])
#    rollingdeath[i] <- mean(newdeaths[(i-6):i])
#}
#rollingcase[1:6] <- newcases[1:6]
#rollingdeath[1:6] <- newdeaths[1:6]
main1 <- paste("Total Cases in:",location,date[n])
main2 <- paste("Total Deaths in:",location,date[n])
main3 <- paste("New Cases in:",location,date[n])
main4 <- paste("New Deaths in:",location,date[n])
if (cd=="c"){
plot(date,newcases,main=main3,ylab="cases",type="o")
}
if (cd=="d"){
plot(date,newdeaths,main=main4,ylab="deaths",type="o")
}
}
townplot("Mercer","cd")
townplot("Mercer","c")
runApp()
View(uscases)
View(usdeaths)
shiny::runApp()
View(uscases)
runApp()
runApp()
View(uscases)
runApp()
runApp()
View(uscases)
View(uscases)
runApp()
runApp()
